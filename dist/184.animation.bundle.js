"use strict";(self.webpackChunkliquidCollectionXChroma=self.webpackChunkliquidCollectionXChroma||[]).push([[184],{184:(t,r,e)=>{e.r(r),e.d(r,{NFTDrop:()=>c});var a=e(2508),n=e(942),i=e(2593),s=e(9279),o=e(2633);e(3550),e(5025),e(332),e(8455),e(6729),e(4098),e(2555),e(6219),e(1303),e(9242),e(4317),e(3670),e(9120),e(7604),e(8187),e(9362),e(4730),e(6250),e(5725),e(8730),e(237),e(5609),e(7208),e(6841),e(9561),e(553),e(26),e(9392),e(2822),e(571),e(2037),e(2162),e(4063),e(4161),e(266),e(8839),e(1375),e(3320),e(5815),e(9189),e(721),e(4601),e(6878),e(583),e(2355),e(4194),e(1121),e(2484),e(8435);class c extends n.aE{constructor(t,r,e){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0;super(arguments.length>6&&void 0!==arguments[6]?arguments[6]:new n.cm(t,r,s,i),e,o),(0,a._)(this,"abi",void 0),(0,a._)(this,"encoder",void 0),(0,a._)(this,"estimator",void 0),(0,a._)(this,"metadata",void 0),(0,a._)(this,"sales",void 0),(0,a._)(this,"platformFees",void 0),(0,a._)(this,"events",void 0),(0,a._)(this,"roles",void 0),(0,a._)(this,"interceptor",void 0),(0,a._)(this,"royalties",void 0),(0,a._)(this,"claimConditions",void 0),(0,a._)(this,"revealer",void 0),(0,a._)(this,"checkout",void 0),(0,a._)(this,"erc721",void 0),(0,a._)(this,"owner",void 0),this.abi=s,this.metadata=new n.ag(this.contractWrapper,n.cz,this.storage),this.roles=new n.ah(this.contractWrapper,c.contractRoles),this.royalties=new n.ai(this.contractWrapper,this.metadata),this.sales=new n.aj(this.contractWrapper),this.claimConditions=new n.al(this.contractWrapper,this.metadata,this.storage),this.encoder=new n.af(this.contractWrapper),this.estimator=new n.aQ(this.contractWrapper),this.events=new n.aR(this.contractWrapper),this.platformFees=new n.aT(this.contractWrapper),this.erc721=new n.av(this.contractWrapper,this.storage,o),this.revealer=new n.ak(this.contractWrapper,this.storage,n.cA.name,(()=>this.erc721.nextTokenIdToMint())),this.interceptor=new n.aS(this.contractWrapper),this.owner=new n.aV(this.contractWrapper),this.checkout=new n.cl(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async totalSupply(){const t=await this.totalClaimedSupply(),r=await this.totalUnclaimedSupply();return t.add(r)}async getAllClaimed(t){const r=i.O$.from((null==t?void 0:t.start)||0).toNumber(),e=i.O$.from((null==t?void 0:t.count)||a.D).toNumber(),n=Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),r+e);return await Promise.all(Array.from(Array(n).keys()).map((t=>this.get(t.toString()))))}async getAllUnclaimed(t){const r=i.O$.from((null==t?void 0:t.start)||0).toNumber(),e=i.O$.from((null==t?void 0:t.count)||a.D).toNumber(),n=i.O$.from(Math.max((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),r)),s=i.O$.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(),n.toNumber()+e));return await Promise.all(Array.from(Array(s.sub(n).toNumber()).keys()).map((t=>this.erc721.getTokenMetadata(n.add(t).toString()))))}async totalClaimedSupply(){return this.erc721.totalClaimedSupply()}async totalUnclaimedSupply(){return this.erc721.totalUnclaimedSupply()}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole((0,n.br)("transfer"),s.d)}async createBatch(t,r){const e=await this.contractWrapper.readContract.nextTokenIdToMint(),a=await(0,n.cB)(t,this.storage,e.toNumber(),r),i=a[0].substring(0,a[0].lastIndexOf("/"));for(let t=0;t<a.length;t++){const r=a[t].substring(0,a[t].lastIndexOf("/"));if(i!==r)throw new Error(`Can only create batches with the same base URI for every entry in the batch. Expected '${i}' but got '${r}'`)}const s=await this.contractWrapper.sendTransaction("lazyMint",[a.length,i.endsWith("/")?i:`${i}/`,o.Y0("")]),c=this.contractWrapper.parseLogs("TokensLazyMinted",null==s?void 0:s.logs),h=c[0].args.startTokenId,l=c[0].args.endTokenId,p=[];for(let t=h;t.lte(l);t=t.add(1))p.push({id:t,receipt:s,data:()=>this.erc721.getTokenMetadata(t)});return p}async getClaimTransaction(t,r){let e=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return this.erc721.getClaimTransaction(t,r,{checkERC20Allowance:e})}async claimTo(t,r){let e=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return this.erc721.claimTo(t,r,{checkERC20Allowance:e})}async claim(t){let r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this.claimTo(await this.contractWrapper.getSignerAddress(),t,r)}async burn(t){return this.erc721.burn(t)}async get(t){return this.erc721.get(t)}async ownerOf(t){return this.erc721.ownerOf(t)}async balanceOf(t){return this.erc721.balanceOf(t)}async balance(){return this.erc721.balance()}async isApproved(t,r){return this.erc721.isApproved(t,r)}async transfer(t,r){return this.erc721.transfer(t,r)}async setApprovalForAll(t,r){return this.erc721.setApprovalForAll(t,r)}async setApprovalForToken(t,r){return{receipt:await this.contractWrapper.sendTransaction("approve",[t,r])}}async call(t){for(var r=arguments.length,e=new Array(r>1?r-1:0),a=1;a<r;a++)e[a-1]=arguments[a];return this.contractWrapper.call(t,...e)}}(0,a._)(c,"contractRoles",["admin","minter","transfer"])}}]);