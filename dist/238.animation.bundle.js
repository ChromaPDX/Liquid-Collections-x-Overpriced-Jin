"use strict";(self.webpackChunkLiquid_Collections_x_Overpriced_Jin=self.webpackChunkLiquid_Collections_x_Overpriced_Jin||[]).push([[238],{5238:(t,r,e)=>{e.r(r),e.d(r,{Multiwrap:()=>o});var n=e(2508),a=e(942),s=e(7616);e(3550),e(5025),e(332),e(8455),e(6729),e(4098),e(2555),e(6219),e(7688),e(9242),e(4317),e(3670),e(9120),e(7604),e(8187),e(9362),e(4730),e(6250),e(5725),e(8730),e(237),e(5609),e(7208),e(6841),e(3881),e(553),e(26),e(9392),e(2822),e(571),e(2037),e(2162),e(4063),e(4161),e(266),e(8839),e(1375),e(3320),e(5815),e(9189),e(721),e(4601),e(6878),e(583),e(2355),e(4194),e(1121),e(2484),e(8435);class o extends a.aE{constructor(t,r,e){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},c=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0;super(arguments.length>6&&void 0!==arguments[6]?arguments[6]:new a.cm(t,r,c,s),e,i),(0,n._)(this,"abi",void 0),(0,n._)(this,"encoder",void 0),(0,n._)(this,"estimator",void 0),(0,n._)(this,"metadata",void 0),(0,n._)(this,"events",void 0),(0,n._)(this,"roles",void 0),(0,n._)(this,"royalties",void 0),(0,n._)(this,"owner",void 0),this.abi=c,this.metadata=new a.ag(this.contractWrapper,a.cs,this.storage),this.roles=new a.ah(this.contractWrapper,o.contractRoles),this.encoder=new a.af(this.contractWrapper),this.estimator=new a.aQ(this.contractWrapper),this.events=new a.aR(this.contractWrapper),this.royalties=new a.ai(this.contractWrapper,this.metadata),this.owner=new a.aV(this.contractWrapper)}async getWrappedContents(t){const r=await this.contractWrapper.readContract.getWrappedContents(t),e=[],n=[],o=[];for(const t of r)switch(t.tokenType){case 0:{const r=await(0,a.ct)(this.contractWrapper.getProvider(),t.assetContract);e.push({contractAddress:t.assetContract,quantity:s.bM(t.totalAmount,r.decimals)});break}case 1:n.push({contractAddress:t.assetContract,tokenId:t.tokenId});break;case 2:o.push({contractAddress:t.assetContract,tokenId:t.tokenId,quantity:t.totalAmount.toString()})}return{erc20Tokens:e,erc721Tokens:n,erc1155Tokens:o}}async wrap(t,r,e){const n=await(0,a.cu)(r,this.storage),s=e||await this.contractWrapper.getSignerAddress(),o=await this.toTokenStructList(t),c=await this.contractWrapper.sendTransaction("wrap",[o,n,s]),i=this.contractWrapper.parseLogs("TokensWrapped",null==c?void 0:c.logs);if(0===i.length)throw new Error("TokensWrapped event not found");const d=i[0].args.tokenIdOfWrappedToken;return{id:d,receipt:c,data:()=>this.get(d)}}async unwrap(t,r){const e=r||await this.contractWrapper.getSignerAddress();return{receipt:await this.contractWrapper.sendTransaction("unwrap",[t,e])}}async toTokenStructList(t){const r=[],e=this.contractWrapper.getProvider(),n=await this.contractWrapper.getSignerAddress();if(t.erc20Tokens)for(const n of t.erc20Tokens){const t=await(0,a.cv)(e,n.quantity,n.contractAddress);if(!await(0,a.cw)(this.contractWrapper,n.contractAddress,t))throw new Error(`ERC20 token with contract address "${n.contractAddress}" does not have enough allowance to transfer.\n\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\n\nawait sdk.getToken("${n.contractAddress}").setAllowance("${this.getAddress()}", ${n.quantity});\n\n`);r.push({assetContract:n.contractAddress,totalAmount:t,tokenId:0,tokenType:0})}if(t.erc721Tokens)for(const e of t.erc721Tokens){if(!await(0,a.cx)(this.contractWrapper.getProvider(),this.getAddress(),e.contractAddress,e.tokenId,n))throw new Error(`ERC721 token "${e.tokenId}" with contract address "${e.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getNFTCollection("${e.contractAddress}").setApprovalForToken("${this.getAddress()}", ${e.tokenId});\n\n`);r.push({assetContract:e.contractAddress,totalAmount:0,tokenId:e.tokenId,tokenType:1})}if(t.erc1155Tokens)for(const e of t.erc1155Tokens){if(!await(0,a.cx)(this.contractWrapper.getProvider(),this.getAddress(),e.contractAddress,e.tokenId,n))throw new Error(`ERC1155 token "${e.tokenId}" with contract address "${e.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getEdition("${e.contractAddress}").setApprovalForAll("${this.getAddress()}", true);\n\n`);r.push({assetContract:e.contractAddress,totalAmount:e.quantity,tokenId:e.tokenId,tokenType:2})}return r}async call(t){for(var r=arguments.length,e=new Array(r>1?r-1:0),n=1;n<r;n++)e[n-1]=arguments[n];return this.contractWrapper.call(t,...e)}}(0,n._)(o,"contractRoles",["admin","transfer","minter","unwrap","asset"])}}]);